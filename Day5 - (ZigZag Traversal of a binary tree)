Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]


class Solution {
    private:
    void levelOrderZigZag(TreeNode* root, vector<vector<int>> &ans){
        queue<TreeNode *>q;
        q.push(root);
        bool flag = true;
        while(!q.empty()){
            int size = q.size();
            vector<int>v(size);
            
            //levelProcess
            for(int i=0; i<size; i++){
                TreeNode *temp = q.front();
                q.pop();
                int index = flag?i:size-i-1;
                v[index] = temp->val;

                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);       }
            flag = !flag;
            ans.push_back(v);

        }
    }
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root == NULL) return ans;
        
        levelOrderZigZag(root,ans);
        return ans;

    }
};