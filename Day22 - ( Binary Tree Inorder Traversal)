Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?
Accepted
1.8M
Submissions
2.5M
Acceptance Rate
73.1%



class Solution {
public:
    void helper_inorder(TreeNode *root,vector<int> &v){
        if(root==NULL)return;   
        helper_inorder(root->left, v);
        v.push_back(root->val);
        helper_inorder(root->right, v);
    }
    vector<int> inorderTraversal(TreeNode* root) {
         vector<int>v; 
        helper_inorder(root, v);
        return v;
    }
};