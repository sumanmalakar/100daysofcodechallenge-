671. Second Minimum Node In a Binary Tree

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.

 

 

Example 1:
Input: root = [2,2,5,null,null,5,7]
Output: 5

Explanation: The smallest value is 2, the second smallest value is 5.

https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/description/

Example 2:
Input: root = [2,2,2]
Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.
 

Constraints:

The number of nodes in the tree is in the range [1, 25].
1 <= Node.val <= 231 - 1
root.val == min(root.left.val, root.right.val) for each internal node of the tree.


class Solution {
    private: 
    void preOrder(TreeNode *root, vector<int> &ans){
        if(root == NULL)return;
        ans.push_back(root->val);

        preOrder(root->left, ans);
        preOrder(root->right, ans);

    }
public:
    int findSecondMinimumValue(TreeNode* root) {
        vector<int>v;
        if(root==NULL) return 0;
        preOrder(root, v);
        sort(v.begin(), v.end());

        int min = v[0];
        int i;
        for(i=1; i<v.size(); i++){
              if(min<v[i]){
                  return v[i];
              }
        } 
        if(i==v.size()) min = -1;

        return min;

    }
};